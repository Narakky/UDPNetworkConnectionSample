//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `rswift`.
    static let rswift = Rswift.FileResource(bundle: R.hostingBundle, name: "rswift", pathExtension: "")
    
    /// `bundle.url(forResource: "rswift", withExtension: "")`
    static func rswift(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rswift
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ConnectionLogTableViewCell`.
    static let connectionLogTableViewCell = _R.nib._ConnectionLogTableViewCell()
    /// Nib `SettingsControlsTableViewCell`.
    static let settingsControlsTableViewCell = _R.nib._SettingsControlsTableViewCell()
    /// Nib `SettingsInputTableViewCell`.
    static let settingsInputTableViewCell = _R.nib._SettingsInputTableViewCell()
    
    /// `UINib(name: "ConnectionLogTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.connectionLogTableViewCell) instead")
    static func connectionLogTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.connectionLogTableViewCell)
    }
    
    /// `UINib(name: "SettingsControlsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsControlsTableViewCell) instead")
    static func settingsControlsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsControlsTableViewCell)
    }
    
    /// `UINib(name: "SettingsInputTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsInputTableViewCell) instead")
    static func settingsInputTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsInputTableViewCell)
    }
    
    static func connectionLogTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConnectionLogTableViewCell? {
      return R.nib.connectionLogTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConnectionLogTableViewCell
    }
    
    static func settingsControlsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsControlsTableViewCell? {
      return R.nib.settingsControlsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsControlsTableViewCell
    }
    
    static func settingsInputTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsInputTableViewCell? {
      return R.nib.settingsInputTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsInputTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `ConnectionTestViewController`.
    static let connectionTestViewController = _R.storyboard.connectionTestViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `SettingsViewController`.
    static let settingsViewController = _R.storyboard.settingsViewController()
    
    /// `UIStoryboard(name: "ConnectionTestViewController", bundle: ...)`
    static func connectionTestViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.connectionTestViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "SettingsViewController", bundle: ...)`
    static func settingsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingsViewController)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ConnectionLogTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ConnectionLogTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConnectionLogTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConnectionLogTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsControlsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsControlsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsControlsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsControlsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsInputTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsInputTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsInputTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsInputTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try connectionTestViewController.validate()
      try launchScreen.validate()
      try main.validate()
      try settingsViewController.validate()
    }
    
    struct connectionTestViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ConnectionTestViewController
      
      let bundle = R.hostingBundle
      let name = "ConnectionTestViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct settingsViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsViewController
      
      let bundle = R.hostingBundle
      let name = "SettingsViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
